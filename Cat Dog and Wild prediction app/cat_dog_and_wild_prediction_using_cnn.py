# -*- coding: utf-8 -*-
"""cat dog and wild prediction using cnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LJXBHLkPU9rl6My5Y2SHx46kXOq9wpf4
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d andrewmvd/animal-faces

import zipfile
zep_ref=zipfile.ZipFile("/content/animal-faces.zip","r")
zep_ref.extractall("/content")
zep_ref.close()

import os
import keras
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D,Flatten,Dense,MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential

train_generator=ImageDataGenerator(
    rescale=1/255.0,
    rotation_range=20,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

validation_generator=ImageDataGenerator(
    rescale=1/255.0
)

train_data = train_generator.flow_from_directory(
    directory='/content/afhq/train',
    target_size=(255, 255),
    batch_size=64,
    class_mode='categorical'
)

validation_data = validation_generator.flow_from_directory(
    directory='/content/afhq/val',
    target_size=(255, 255),
    batch_size=64,
    class_mode='categorical'
)
train_images, train_labels = train_data.next()
validation_images, validation_labels = train_data.next()

print(f"trian_images :{train_images.shape} ,\ntrian_labels :{train_labels.shape}")
print(f"validation_images :{validation_images.shape} ,\nvalidation_labels :{validation_labels.shape}")

class_names=['cat','dog','wild']

def show_image(train_data, class_names, idx):
    # Generate a batch of images and labels
    batch_images, batch_labels = next(train_data)

    idx = idx % len(batch_images)
    # Display the image
    plt.imshow(batch_images[idx])

    # Interpret the label using class_names
    label_index = batch_labels[idx].argmax()
    plt.title(class_names[label_index])

    plt.show()

import random
index = random.randint(0, len(train_data) - 1)

# Show the image with its class name
show_image(train_data, class_names, index)

# it will show random picture form train data
def show_image(train_data, class_names, num_images=10):
    # Create a figure with specified size
    plt.figure(figsize=(16, 16))

    # Generate and display multiple images and labels
    for i in range(num_images):
        # Generate a batch of images and labels
        batch_images, batch_labels = next(train_data)

        # Display each image
        plt.subplot(5, 5, i + 1)  # Create subplots in a grid
        plt.imshow(batch_images[0])  # Display the first image from the batch
        plt.axis('off')

        # Interpret the label using class_names
        label_index = batch_labels[0].argmax()
        plt.title(class_names[label_index])

    plt.show()

# Assuming you have defined train_data and class_names previously
# Show multiple images with their class names
show_image(train_data, class_names)

model=Sequential()
model.add(Conv2D(filters=32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(255,255,3)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters=64,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(filters=128,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(units=128,activation='relu'))
model.add(Dense(units=64,activation='relu'))
model.add(Dense(units=3,activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

history = model.fit(train_data,epochs=10,validation_data=(validation_images,validation_labels))

plt.plot(history.history['loss'],label='loss')
plt.plot(history.history['val_loss'],label='val_loss')
plt.legend()

plt.plot(history.history['accuracy'],label='accuracy')
plt.plot(history.history['val_accuracy'],label='val_accuracy')
plt.legend()

model.save('train_model.h5')

